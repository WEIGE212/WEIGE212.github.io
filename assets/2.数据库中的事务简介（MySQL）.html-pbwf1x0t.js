import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as n,e,a as l,f as o}from"./app-dSGB2PdT.js";const i="/assets/脏读-vFGJvqnE.png",p="/assets/不可重复读-yT37SmEU.png",t="/assets/幻读-REJoX7QH.png",c="/assets/隔离级别-H5_8mlnd.png",r={},d=l("p",null,"​ 事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。本文以MySQL为例讲解事务。",-1),u=o(`<h2 id="_1-事务的简介" tabindex="-1"><a class="header-anchor" href="#_1-事务的简介" aria-hidden="true">#</a> 1. 事务的简介</h2><ul><li>事务是一组操作的集合，这组操作集合要么同时执行成功，要么同时执行不成。</li><li>例如： 张三给李四转账1000块钱，张三银行账户的钱减少1000，而李四银行账户的钱要增加1000。 这一组操作就必须在一个事务的范围内，要么都成功，要么都失败。</li></ul><blockquote><p>注意： 默认MySQL的事务是自动提交的，也就是说，当执行完一条DML语句时，MySQL会立即隐式的提交事务。</p></blockquote><ul><li>查看事务提交方式，并设置手动提交</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span> <span class="token punctuation">;</span>
<span class="token keyword">SET</span> @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>提交事务</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>回滚事务</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>注意：上述的这种方式，我们是修改了事务的自动提交行为, 把默认的自动提交修改为了手动提交, 此时我们执行的DML语句都不会提交, 需要手动的执行commit进行提交。</p></blockquote><ul><li>开启一个事务</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> 或 <span class="token keyword">BEGIN</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>举例</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开启事务</span>
<span class="token keyword">start</span> <span class="token keyword">transaction</span>
<span class="token comment">-- 1. 查询张三余额</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 2. 张三的余额减少1000</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 3. 李四的余额增加1000</span>
<span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">1000</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">;</span>
<span class="token comment">-- 如果正常执行完毕, 则提交事务</span>
<span class="token keyword">commit</span><span class="token punctuation">;</span>
<span class="token comment">-- 如果执行过程中报错, 则回滚事务</span>
<span class="token comment">-- rollback;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-事务的四大特性" tabindex="-1"><a class="header-anchor" href="#_2-事务的四大特性" aria-hidden="true">#</a> 2. 事务的四大特性</h2><p>事务的四大特性，简称ACID。</p><ul><li><p>原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p></li><li><p>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</p></li><li><p>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</p></li><li><p>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</p></li></ul><h2 id="_3-并发事务问题" tabindex="-1"><a class="header-anchor" href="#_3-并发事务问题" aria-hidden="true">#</a> 3. 并发事务问题</h2><ul><li><p>赃读：一个事务读到另外一个事务还没有提交的数据。（B读取到了A未提交的数据）</p><figure><img src="`+i+'" alt="脏读" tabindex="0" loading="lazy"><figcaption>脏读</figcaption></figure></li><li><p>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。（事务A两次读取同一条记录，但是读取到的数据却是不一样的）</p></li></ul><figure><img src="'+p+'" alt="不可重复读" tabindex="0" loading="lazy"><figcaption>不可重复读</figcaption></figure><ul><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了 &quot;幻影&quot;。</li></ul><figure><img src="'+t+'" alt="幻读" tabindex="0" loading="lazy"><figcaption>幻读</figcaption></figure><h2 id="_4-事务隔离级别" tabindex="-1"><a class="header-anchor" href="#_4-事务隔离级别" aria-hidden="true">#</a> 4. 事务隔离级别</h2><p>为了解决并发事务所引发的问题，在数据库中引入了事务隔离级别。主要有以下几种：</p><figure><img src="'+c+`" alt="隔离级别" tabindex="0" loading="lazy"><figcaption>隔离级别</figcaption></figure><ul><li>查看事务隔离级别</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>设置事务隔离级别</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token punctuation">[</span> <span class="token keyword">SESSION</span> <span class="token operator">|</span> <span class="token keyword">GLOBAL</span> <span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> { <span class="token keyword">READ</span> <span class="token keyword">UNCOMMITTED</span> <span class="token operator">|</span>
<span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span> <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span> }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><blockquote><p>注意：事务隔离级别越高，数据越安全，但是性能越低。</p></blockquote><hr>`,32);function k(m,v){return a(),n("div",null,[d,e(" more "),u])}const y=s(r,[["render",k],["__file","2.数据库中的事务简介（MySQL）.html.vue"]]);export{y as default};
