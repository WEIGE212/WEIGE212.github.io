import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as t,c as e,e as p,a as i,f as l}from"./app-dSGB2PdT.js";const o="/assets/MavenWeb项目结构-XZeBgyNc.png",c="/assets/部署的Web项目-W5Kplde6.png",a="/assets/创建Maven项目模块-uA5R268-.png",g="/assets/使用Web项目骨架-akPuG746.png",n="/assets/输入Maven项目坐标创建项目-qQNfKzbG.png",u="/assets/确认Maven相关的配置信息-9c-njZQX.png",r="/assets/删除pom.xml中多余内容-EOJBxedB.png",d="/assets/不使用Web项目骨架-IGQQTBWK.png",m="/assets/设置打包方式为war-oHvQHdkW.png",v="/assets/补齐webapp的目录结构-HA-e95wc.png",k="/assets/补齐WEB-INF下的web.xml的目录结构-RfFFQu7b.png",b="/assets/最终的项目结构-Bq5qGCwc.png",f="/assets/打开添加本地Tomcat的面板-xIOYad_O.png",_="/assets/指定本地Tomcat的具体路径-9-ZTZWXb.png",h="/assets/修改Tomcat的名称-KeXcNuzM.png",x="/assets/将开发项目部署项目到Tomcat中-zCgXFMF7.png",M="/assets/启动项目-IQLwZd_u.png",W="/assets/注意事项-J5XiQMKu.png",T={},w=i("p",null,"使用IDEA编辑器集成TomCat创建Maven的Web项目",-1),I=l('<h2 id="_1-maven创建web项目" tabindex="-1"><a class="header-anchor" href="#_1-maven创建web项目" aria-hidden="true">#</a> 1. Maven创建Web项目</h2><h3 id="_1-1-web项目结构" tabindex="-1"><a class="header-anchor" href="#_1-1-web项目结构" aria-hidden="true">#</a> 1.1 Web项目结构</h3><ul><li><p>Maven Web项目结构: 开发中的项目</p><figure><img src="'+o+'" alt="MavenWeb项目结构" tabindex="0" loading="lazy"><figcaption>MavenWeb项目结构</figcaption></figure></li><li><p>开发完成部署的Web项目</p><figure><img src="'+c+'" alt="部署的Web项目" tabindex="0" loading="lazy"><figcaption>部署的Web项目</figcaption></figure><ul><li>开发项目通过执行Maven打包命令<strong>package</strong>,可以获取到部署的Web项目目录</li><li>编译后的Java字节码文件和resources的资源文件，会被放到WEB-INF下的classes目录下</li><li>pom.xml中依赖坐标对应的jar包，会被放入WEB-INF下的lib目录下</li></ul></li></ul><h3 id="_1-2-创建maven-web项目" tabindex="-1"><a class="header-anchor" href="#_1-2-创建maven-web项目" aria-hidden="true">#</a> 1.2 创建Maven Web项目</h3><h4 id="_1-2-1-使用骨架" tabindex="-1"><a class="header-anchor" href="#_1-2-1-使用骨架" aria-hidden="true">#</a> 1.2.1 使用骨架</h4><blockquote><p>具体的步骤包含:</p><p>1.创建Maven项目</p><p>2.选择使用Web项目骨架</p><p>3.输入Maven项目坐标创建项目</p><p>4.确认Maven相关的配置信息后，完成项目创建</p><p>5.删除pom.xml中多余内容</p><p>6.补齐Maven Web项目缺失的目录结构</p></blockquote><ol><li><p>创建Maven项目</p><figure><img src="'+a+'" alt="创建Maven项目模块" tabindex="0" loading="lazy"><figcaption>创建Maven项目模块</figcaption></figure></li><li><p>选择使用Web项目骨架</p><figure><img src="'+g+'" alt="使用Web项目骨架" tabindex="0" loading="lazy"><figcaption>使用Web项目骨架</figcaption></figure></li><li><p>输入Maven项目坐标创建项目</p><figure><img src="'+n+'" alt="输入Maven项目坐标创建项目" tabindex="0" loading="lazy"><figcaption>输入Maven项目坐标创建项目</figcaption></figure></li><li><p>确认Maven相关的配置信息后，完成项目创建</p><figure><img src="'+u+'" alt="确认Maven相关的配置信息" tabindex="0" loading="lazy"><figcaption>确认Maven相关的配置信息</figcaption></figure></li><li><p>删除pom.xml中多余内容，只留下面的这些内容，注意打包方式 jar和war的区别</p><figure><img src="'+r+'" alt="删除pom.xml中多余内容" tabindex="0" loading="lazy"><figcaption>删除pom.xml中多余内容</figcaption></figure></li><li><p>补齐Maven Web项目缺失的目录结构，默认没有java和resources目录，需要手动完成创建补齐，最终的目录结果如下</p><p>![Maven Web项目的目录结构](./assets/Maven Web项目的目录结构.png)</p></li></ol><h4 id="_1-2-2-不使用骨架" tabindex="-1"><a class="header-anchor" href="#_1-2-2-不使用骨架" aria-hidden="true">#</a> 1.2.2 不使用骨架</h4><blockquote><p>具体的步骤包含:</p><p>1.创建Maven项目</p><p>2.选择不使用Web项目骨架</p><p>3.输入Maven项目坐标创建项目</p><p>4.在pom.xml设置打包方式为war</p><p>5.补齐Maven Web项目缺失webapp的目录结构</p><p>6.补齐Maven Web项目缺失WEB-INF/web.xml的目录结构</p></blockquote><ol><li>创建Maven项目</li></ol><figure><img src="'+a+'" alt="创建Maven项目模块" tabindex="0" loading="lazy"><figcaption>创建Maven项目模块</figcaption></figure><ol start="2"><li>选择不使用Web项目骨架</li></ol><figure><img src="'+d+'" alt="不使用Web项目骨架" tabindex="0" loading="lazy"><figcaption>不使用Web项目骨架</figcaption></figure><ol start="3"><li>输入Maven项目坐标创建项目</li></ol><figure><img src="'+n+'" alt="输入Maven项目坐标创建项目" tabindex="0" loading="lazy"><figcaption>输入Maven项目坐标创建项目</figcaption></figure><ol start="4"><li>在pom.xml设置打包方式为war,默认是不写代表打包方式为jar</li></ol><figure><img src="'+m+'" alt="设置打包方式为war" tabindex="0" loading="lazy"><figcaption>设置打包方式为war</figcaption></figure><ol start="5"><li>补齐Maven Web项目缺失webapp的目录结构</li></ol><figure><img src="'+v+'" alt="补齐webapp的目录结构" tabindex="0" loading="lazy"><figcaption>补齐webapp的目录结构</figcaption></figure><ol start="6"><li>补齐Maven Web项目缺失WEB-INF/web.xml的目录结构</li></ol><figure><img src="'+k+'" alt="补齐Maven Web项目缺失WEB-INF/web.xml的目录结构" tabindex="0" loading="lazy"><figcaption>补齐Maven Web项目缺失WEB-INF/web.xml的目录结构</figcaption></figure><ol start="7"><li>补充完后，最终的项目结构如下:</li></ol><figure><img src="'+b+'" alt="最终的项目结构" tabindex="0" loading="lazy"><figcaption>最终的项目结构</figcaption></figure><h2 id="_2-idea集成tomcat" tabindex="-1"><a class="header-anchor" href="#_2-idea集成tomcat" aria-hidden="true">#</a> 2. IDEA集成Tomcat</h2><ul><li>Maven Web项目创建成功后，通过Maven的package命令可以将项目打包成war包，将war文件拷贝到Tomcat的webapps目录下，启动Tomcat就可以将项目部署成功，然后通过浏览器进行访问即可。</li><li>然而我们在开发的过程中，项目中的内容会经常发生变化，如果按照上面这种方式来部署测试，是非常不方便的，因此可以在IDEA中集成使用Tomcat，集成方式分为两种： <ul><li>集成本地Tomcat</li><li>Tomcat Maven插件</li></ul></li></ul><h3 id="_2-1-集成本地tomcat" tabindex="-1"><a class="header-anchor" href="#_2-1-集成本地tomcat" aria-hidden="true">#</a> 2.1 集成本地Tomcat</h3><ol><li><p>打开添加本地Tomcat的面板</p><figure><img src="'+f+'" alt="打开添加本地Tomcat的面板" tabindex="0" loading="lazy"><figcaption>打开添加本地Tomcat的面板</figcaption></figure></li><li><p>指定本地Tomcat的具体路径</p><figure><img src="'+_+'" alt="指定本地Tomcat的具体路径" tabindex="0" loading="lazy"><figcaption>指定本地Tomcat的具体路径</figcaption></figure></li><li><p>修改Tomcat的名称，此步骤可以不改，只是让名字看起来更有意义，HTTP port中的端口也可以进行修改，比如把8080改成80</p><figure><img src="'+h+'" alt="修改Tomcat的名称" tabindex="0" loading="lazy"><figcaption>修改Tomcat的名称</figcaption></figure></li><li><p>将开发项目部署项目到Tomcat中</p><figure><img src="'+x+'" alt="将开发项目部署项目到Tomcat中" tabindex="0" loading="lazy"><figcaption>将开发项目部署项目到Tomcat中</figcaption></figure><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>扩展内容： xxx.war和 xxx.war exploded这两种部署项目模式的区别?</p><ul><li>war模式是将WEB工程打成war包，把war包发布到Tomcat服务器上</li><li>war exploded模式是将WEB工程以当前文件夹的位置关系发布到Tomcat服务器上</li><li>war模式部署成功后，Tomcat的webapps目录下会有部署的项目内容</li><li>war exploded模式部署成功后，Tomcat的webapps目录下没有，而使用的是项目的target目录下的内容进行部署</li><li>建议大家都选war模式进行部署，更符合项目部署的实际情况</li></ul></div></li><li><p>部署成功后，就可以启动项目，为了能更好的看到启动的效果，可以在webapp目录下添加a.html页面</p><figure><img src="'+M+'" alt="启动项目" tabindex="0" loading="lazy"><figcaption>启动项目</figcaption></figure><blockquote><p><strong>最终的注意事项</strong></p></blockquote><figure><img src="'+W+`" alt="注意事项" tabindex="0" loading="lazy"><figcaption>注意事项</figcaption></figure></li></ol><h3 id="_2-2-tomcat-maven插件" tabindex="-1"><a class="header-anchor" href="#_2-2-tomcat-maven插件" aria-hidden="true">#</a> 2.2 Tomcat Maven插件</h3><p>在IDEA中使用本地Tomcat进行项目部署，相对来说步骤比较繁琐，所以我们需要一种更简便的方式来替换它，那就是直接使用Maven中的Tomcat插件来部署项目，具体的实现步骤，只需要两步，分别是:</p><ol><li><p>在pom.xml中添加Tomcat插件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    	<span class="token comment">&lt;!--Tomcat插件 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用Maven Helper插件快速启动项目，选中项目，右键--&gt;Run Maven --&gt; tomcat7:run</p></li></ol><p>![Maven Helper](./assets/Maven Helper.png)</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><ul><li><p>如果选中项目并右键点击后，看不到Run Maven和Debug Maven，这个时候就需要在IDEA中下载Maven Helper插件，具体的操作方式为: File --&gt; Settings --&gt; Plugins --&gt; Maven Helper ---&gt; Install,安装完后按照提示重启IDEA，就可以看到了。</p></li><li><p>Maven Tomcat插件目前只有Tomcat7版本，没有更高的版本可以使用</p></li><li><p>使用Maven Tomcat插件，要想修改Tomcat的端口和访问路径，可以直接修改pom.xml</p></li></ul></div><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
    	<span class="token comment">&lt;!--Tomcat插件 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
            	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--访问端口号 --&gt;</span>
                <span class="token comment">&lt;!--项目访问路径
					未配置访问路径: http://localhost:80/tomcat-demo2/a.html
					配置/后访问路径: http://localhost:80/a.html
					如果配置成 /hello,访问路径会变成什么?
						答案: http://localhost:80/hello/a.html
				--&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function z(y,E){return t(),e("div",null,[w,p(" more "),I])}const F=s(T,[["render",z],["__file","1.IDEA创建Web项目.html.vue"]]);export{F as default};
