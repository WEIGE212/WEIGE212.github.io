import{_ as i}from"./AOP示例图-53JeklCo.js";import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{o as a,c as t,e as r,a as e,f as o}from"./app-dSGB2PdT.js";const n="/assets/使用代理前后-y-NtxiK_.png",s="/assets/AOP术语-Ssz_Pxlj.png",c={},g=e("p",null,"AOP（Aspect Oriented Programming），面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。",-1),_=o('<h2 id="_1-动态代理" tabindex="-1"><a class="header-anchor" href="#_1-动态代理" aria-hidden="true">#</a> 1. 动态代理</h2><ul><li>代理模式时二十三种设计模式中的结构型模式，通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类<strong>间接</strong>调用。</li><li>作用： <ul><li>代码解耦：让不属于目标方法核心逻辑的代码从目标方法中<strong>解耦</strong>。</li><li>访问控制：调用目标方法时先调用代理对象的方法，减少对目标方法核心的修改。</li><li>功能增强：同时附加对用目标方法增强的功能。</li></ul></li><li>图示如下：</li></ul><figure><img src="'+n+'" alt="使用代理前后" tabindex="0" loading="lazy"><figcaption>使用代理前后</figcaption></figure><ul><li>代理模式分为静态代理和动态代理两种 <ul><li>静态代理：是对某类目标方法定制增强的代理类，当目标类增加了，代理类可能也需要成倍的增加。 代理类数量过多，不具有任何的灵活性。</li><li>动态代理：在运行期间，对目标对象的方法进行增强，代理对象同名方法内可以执行原有逻辑的同时嵌入执行其他增强逻辑或其他对象的方法（Java使用JDK的反射机制，创建代理类对象， 并动态的指定要代理目标类）</li></ul></li></ul><h2 id="_2-aop原理" tabindex="-1"><a class="header-anchor" href="#_2-aop原理" aria-hidden="true">#</a> 2. AOP原理</h2><h3 id="_2-1-aop的理解" tabindex="-1"><a class="header-anchor" href="#_2-1-aop的理解" aria-hidden="true">#</a> 2.1 AOP的理解</h3><ul><li>AOP思想是对面向对象编程OOP的升华。OOP是纵向对一个事物的抽象，一个对象包括静态的属性信息，包括动态的方法信息等。而AOP是横向的对不同事物的抽象，属性与属性、方法与方法、对象与对象都可以组成一个切面。切面分散在每个各个模块中解决同一样的问题，如用户验证、日志管理、事务处理、数据缓存都属于切面关注点。从每个方法中抽取出来的同一类非核心业务。</li><li>AOP通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。</li><li>AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</li></ul><figure><img src="'+i+'" alt="AOP示例图" tabindex="0" loading="lazy"><figcaption>AOP示例图</figcaption></figure><ul><li>如上图所示，代理类通过调用业务的方法，在不修改业务方法本身的情况下为其添加事务功能和日志记录功能的增强。</li></ul><h3 id="_2-2-aop相关术语" tabindex="-1"><a class="header-anchor" href="#_2-2-aop相关术语" aria-hidden="true">#</a> 2.2 AOP相关术语</h3><figure><img src="'+s+'" alt="AOP术语示意图" tabindex="0" loading="lazy"><figcaption>AOP术语示意图</figcaption></figure><ul><li>目标对象（Target）：被增强的方法所在的对象。</li><li>代理对象（Proxy）：对目标对象进行增强后的对象，客户端实际调用的对象。</li><li>连接点（Joinpoint）：目标对象中可以被增强的方法。</li><li>切入点（Pointcut）：目标对象中实际被增强的方法。</li><li>通知\\增强（Advice）：增强部分的代码逻辑。 <ul><li>前置通知：在被代理的目标方法<strong>前</strong>执行</li><li>返回通知：在被代理的目标方法<strong>成功结束</strong>后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法<strong>异常结束</strong>后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法<strong>最终结束</strong>后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try...catch...finally结构围绕<strong>整个</strong>被代理的目标方法，包括上面四种通知对应的所有位置</li></ul></li><li>切面（Aspect）：增强和切入点的组合。</li><li>织入（Weaving）：将通知和切入点组合动态组合的过程。</li></ul>',12);function d(u,h){return a(),t("div",null,[g,r(" more "),_])}const m=l(c,[["render",d],["__file","6.AOP原理解析.html.vue"]]);export{m as default};
