const e=JSON.parse('{"key":"v-a8fe0d56","path":"/blogs/articles/spring/2.%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SpringIoC%E5%8E%9F%E7%90%86.html","title":"深入理解Spring IoC原理","lang":"zh-CN","frontmatter":{"title":"深入理解Spring IoC原理","icon":"laptop-code","date":"2024-03-08T00:00:00.000Z","star":true,"order":2,"category":["Spring"],"tag":["IoC","DI"],"description":"传统的Java程序代码通常将对象的构建、接口的实现以及业务的实现紧密的耦合在一起，不利于代码的扩展性。为了解决了传统Java程序代码的紧密耦合问题。Spring提出了IoC（Inversion of control：即控制反转）的设计思想，将原本在程序中手动创建对象的控制权、对象之间的相互依赖关系交给 IoC 容器来管理，并由IoC容器完成对象的依赖注入。这样即实现了对象之间的松耦合，使程序的的可读性和扩展性大大提升，又在可以很大程度上简化应用的开发。","head":[["meta",{"property":"og:url","content":"https://weige212.github.io/blogs/articles/spring/2.%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3SpringIoC%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"WEI的知识库"}],["meta",{"property":"og:title","content":"深入理解Spring IoC原理"}],["meta",{"property":"og:description","content":"传统的Java程序代码通常将对象的构建、接口的实现以及业务的实现紧密的耦合在一起，不利于代码的扩展性。为了解决了传统Java程序代码的紧密耦合问题。Spring提出了IoC（Inversion of control：即控制反转）的设计思想，将原本在程序中手动创建对象的控制权、对象之间的相互依赖关系交给 IoC 容器来管理，并由IoC容器完成对象的依赖注入。这样即实现了对象之间的松耦合，使程序的的可读性和扩展性大大提升，又在可以很大程度上简化应用的开发。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://weige212.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-11T14:39:30.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"深入理解Spring IoC原理"}],["meta",{"property":"article:author","content":"Mr.WEI"}],["meta",{"property":"article:tag","content":"IoC"}],["meta",{"property":"article:tag","content":"DI"}],["meta",{"property":"article:published_time","content":"2024-03-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-11T14:39:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入理解Spring IoC原理\\",\\"image\\":[\\"https://weige212.github.io/\\"],\\"datePublished\\":\\"2024-03-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-11T14:39:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.WEI\\"}]}"]]},"headers":[{"level":2,"title":"1.IoC与DI思想的提出","slug":"_1-ioc与di思想的提出","link":"#_1-ioc与di思想的提出","children":[]},{"level":2,"title":"2.BeanFactory详解","slug":"_2-beanfactory详解","link":"#_2-beanfactory详解","children":[]},{"level":2,"title":"3.Bean的生产流程详解","slug":"_3-bean的生产流程详解","link":"#_3-bean的生产流程详解","children":[]},{"level":2,"title":"4.Bean的生命周期详解","slug":"_4-bean的生命周期详解","link":"#_4-bean的生命周期详解","children":[]},{"level":2,"title":"5.Spring IoC整体流程总结","slug":"_5-spring-ioc整体流程总结","link":"#_5-spring-ioc整体流程总结","children":[]}],"git":{"createdTime":1746974370000,"updatedTime":1746974370000,"contributors":[{"name":"zhaowei","email":"351833699@qq.com","commits":1}]},"readingTime":{"minutes":10.62,"words":3187},"filePathRelative":"blogs/articles/spring/2.深入理解SpringIoC原理.md","localizedDate":"2024年3月8日","excerpt":"<p>传统的Java程序代码通常将对象的构建、接口的实现以及业务的实现紧密的耦合在一起，不利于代码的扩展性。为了解决了传统Java程序代码的紧密耦合问题。Spring提出了IoC（Inversion of control：即控制反转）的设计思想，将原本在程序中手动创建对象的控制权、对象之间的相互依赖关系交给 IoC 容器来管理，并由IoC容器完成对象的依赖注入。这样即实现了对象之间的松耦合，使程序的的可读性和扩展性大大提升，又在可以很大程度上简化应用的开发。</p>\\n","autoDesc":true}');export{e as data};
