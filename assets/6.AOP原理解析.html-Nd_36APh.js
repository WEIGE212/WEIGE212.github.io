const e=JSON.parse('{"key":"v-22093d80","path":"/blogs/articles/spring/6.AOP%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html","title":"AOP原理解析","lang":"zh-CN","frontmatter":{"title":"AOP原理解析","icon":"laptop-code","date":"2024-04-09T00:00:00.000Z","star":true,"order":6,"category":["Spring"],"tag":["AOP"],"description":"AOP（Aspect Oriented Programming），面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。","head":[["meta",{"property":"og:url","content":"https://weige212.github.io/blogs/articles/spring/6.AOP%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"WEI的知识库"}],["meta",{"property":"og:title","content":"AOP原理解析"}],["meta",{"property":"og:description","content":"AOP（Aspect Oriented Programming），面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://weige212.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-11T14:39:30.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"AOP原理解析"}],["meta",{"property":"article:author","content":"Mr.WEI"}],["meta",{"property":"article:tag","content":"AOP"}],["meta",{"property":"article:published_time","content":"2024-04-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-11T14:39:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"AOP原理解析\\",\\"image\\":[\\"https://weige212.github.io/\\"],\\"datePublished\\":\\"2024-04-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-11T14:39:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.WEI\\"}]}"]]},"headers":[{"level":2,"title":"1. 动态代理","slug":"_1-动态代理","link":"#_1-动态代理","children":[]},{"level":2,"title":"2. AOP原理","slug":"_2-aop原理","link":"#_2-aop原理","children":[{"level":3,"title":"2.1 AOP的理解","slug":"_2-1-aop的理解","link":"#_2-1-aop的理解","children":[]},{"level":3,"title":"2.2 AOP相关术语","slug":"_2-2-aop相关术语","link":"#_2-2-aop相关术语","children":[]}]}],"git":{"createdTime":1746974370000,"updatedTime":1746974370000,"contributors":[{"name":"zhaowei","email":"351833699@qq.com","commits":1}]},"readingTime":{"minutes":3.57,"words":1072},"filePathRelative":"blogs/articles/spring/6.AOP原理解析.md","localizedDate":"2024年4月9日","excerpt":"<p>AOP（Aspect Oriented Programming），面向切面编程，它是面向对象编程的一种补充和完善，它以通过预编译方式和运行期动态代理方式实现，在不修改源代码的情况下，给程序动态统一添加额外功能的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>\\n","autoDesc":true}');export{e as data};
